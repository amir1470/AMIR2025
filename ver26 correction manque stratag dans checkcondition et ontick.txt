//+------------------------------------------------------------------+
//|                     DIAMOND EA VER26 - CORRECTED                 |
//|                  Multi-strategy Expert Advisor                   |
//|                 Compatible avec GOLD (Gold/XAUUSD)               |
//|                 Auteur: amirbs14 - github.com/amirbs14           |
//|                 Version corrigée et optimisée                    |
//+------------------------------------------------------------------+

//===================================================
// SECTION 1 : INCLUDES ET CONFIGURATION DE BASE
//===================================================

//--- Includes des bibliothèques MQL5
#include <Trade\Trade.mqh>
#include <Trade\PositionInfo.mqh>
#include <Trade\HistoryOrderInfo.mqh>
#include <Trade\DealInfo.mqh>
#include <Indicators\Trend.mqh>
#include <Indicators\Oscilators.mqh>
#include <Indicators\Volumes.mqh>
#include <Graphics\Graphic.mqh>
#include <Generic\ArrayList.mqh>
#include <Arrays\ArrayObj.mqh>
#include <Generic\HashMap.mqh>
#include <ChartObjects\ChartObjectsTxtControls.mqh>
#include <ChartObjects\ChartObjectsShapes.mqh>

//--- Définition des propriétés de l'EA
#property copyright "amirbs14"
#property link      "https://github.com/amirbs14"
#property version   "26.0"
#property strict

//===================================================
// SECTION 2 : CONSTANTES GLOBALES ET DEFINITIONS
//===================================================

#define STRATEGY_COUNT 6                // Nombre total de stratégies
#define MAX_POSITIONS_PER_SYMBOL 3      // Positions max par symbole
#define MAX_SYMBOLS 20                  // Symboles max suivis
#define MAX_RETRIES 3                   // Tentatives de lecture indicateurs
#define MIN_BARS_REQUIRED 50            // Barres minimum requises

//===================================================
// SECTION 3 : STRUCTURES DE DONNEES
//===================================================

//+------------------------------------------------------------------+
//| Enumération des stratégies disponibles                          |
//+------------------------------------------------------------------+
enum ENUM_STRATEGY {
   STRAT_NONE = 0,          // Aucune stratégie
   STRAT_CHECKLIST = 1,     // Stratégie checklist
   STRAT_BREAKOUT_RANGE = 2,// Stratégie breakout
   STRAT_PULLBACK_EMA = 3,  // Stratégie pullback EMA
   STRAT_SUPERTREND = 4,    // Stratégie SuperTrend
   STRAT_RETEST_SR = 5,     // Stratégie retest support/résistance
   STRAT_SCALPING = 6       // Stratégie scalping
};

//+------------------------------------------------------------------+
//| Structure pour les performances des stratégies                  |
//+------------------------------------------------------------------+
struct SStrategyPerformance {
   ENUM_STRATEGY strategy;     // Type de stratégie
   int totalTrades;            // Nombre total de trades
   int wins;                   // Trades gagnants
   int losses;                 // Trades perdants
   double totalProfit;         // Profit total
   double winRate;             // Taux de réussite
   double profitFactor;        // Facteur de profit
   bool enabled;               // Statut d'activation
   datetime lastTradeTime;     // Heure du dernier trade
   double weight;              // Poids dans la sélection
};

//+------------------------------------------------------------------+
//| Structure pour les signaux de trading                          |
//+------------------------------------------------------------------+
struct STradeSignal {
   bool valid;                 // Validité du signal
   bool isBuySignal;           // Signal d'achat si vrai
   double price;               // Prix d'entrée
   double sl;                  // Niveau de stop-loss
   double tp;                  // Niveau de take-profit
   ENUM_STRATEGY strategy;     // Stratégie générant le signal
   string comment;             // Commentaire descriptif
};

//+------------------------------------------------------------------+
//| Structure pour les statistiques par symbole                     |
//+------------------------------------------------------------------+
struct SSymbolStats {
   string symbol;              // Symbole du marché
   int totalTrades;            // Trades totaux
   int winTrades;              // Trades gagnants
   int lossTrades;             // Trades perdants
   int todayTrades;            // Trades aujourd'hui
   int todayWins;              // Gains aujourd'hui
   int todayLosses;            // Pertes aujourd'hui
   double spreadSum;           // Somme des spreads
   int spreadCount;            // Nombre de spreads enregistrés
   double spreadMax;           // Spread maximum observé
   double lastSpread;          // Dernier spread enregistré
};

//+------------------------------------------------------------------+
//| Structure pour les statistiques des stratégies                  |
//+------------------------------------------------------------------+
struct StrategyStats {
   string  Name;               // Nom de la stratégie
   bool    Enabled;            // Statut d'activation
   int     TotalTrades;        // Trades totaux
   int     Wins;               // Trades gagnants
   int     Losses;             // Trades perdants
   double  Profit;             // Profit total
   double  WinRate;            // Taux de réussite
   color   StatusColor;        // Couleur d'affichage
};

//+------------------------------------------------------------------+
//| Structure pour les statistiques quotidiennes                    |
//+------------------------------------------------------------------+
struct DailyStats {
   datetime Day;               // Date
   double   Profit;            // Profit du jour
   int      Trades;            // Nombre de trades
   double   MaxDrawdown;       // Drawdown maximum
};

//===================================================
// SECTION 4 : PARAMETRES D'ENTREE
//===================================================

input group "Risk Management"
input double   MaxDailyLossPercent = 3.0;    // Perte quotidienne max (% du balance)
input double   MaxLossPercent = 1.5;         // Perte max par trade (% du balance)
input int      MaxConsecutiveLosses = 5;     // Pertes consécutives max avant pause
input int      PauseAfterLosses = 3;         // Pause après X pertes consécutives
input int      PauseDurationMinutes = 30;    // Durée de pause en minutes
input int      MinMinutesBetweenTrades = 5;  // Temps minimum entre trades
input bool     EnableStrategyAutoManagement = true; // Gestion automatique des stratégies
input bool     EnableNotifications = true;   // Activer les notifications
input bool     EnableDebugLogging = true;    // Activer les logs détaillés

input group "SuperTrend Settings"
input int      SuperTrend_ATRPeriod = 10;    // Période ATR pour SuperTrend
input double   SuperTrend_Multiplier = 3.0;  // Multiplicateur pour SuperTrend
input bool     EnableSuperTrendInput = true; // Activer la stratégie SuperTrend

input group "Checklist Strategy Parameters"
input int      Checklist_MACD_Fast = 8;      // Période rapide MACD
input int      Checklist_MACD_Slow = 20;     // Période lente MACD
input int      Checklist_MACD_Signal = 9;    // Période signal MACD
input double   Checklist_RSI_Min = 30.0;     // Niveau minimum RSI
input double   Checklist_RSI_Max = 70.0;     // Niveau maximum RSI
input double   Checklist_ADX_Min = 25.0;     // Niveau minimum ADX

input group "Additional Parameters"
input int      MinTradesToDisable = 20;      // Trades min avant désactivation
input double   MinWinRateToDisable = 40.0;   // Taux de réussite min (%)
input int      ReEnableAfterHours = 24;      // Heures avant réactivation

input group "Trading Settings"
input double   InitialLot = 0.01;            // Taille de lot initiale
input double   MaxLot = 5.0;                 // Taille de lot maximum
input double   RiskPercent = 1.0;            // Risque par trade (% du balance)
input int      MagicNumber = 20200520;       // Magic number unique
input int      Slippage = 5;                 // Slippage max (points)
input int      ATRPeriod = 14;               // Période ATR pour filtre volatilité

input group "Dashboard Settings"
input int      DashboardPosX = 10;           // Position X du dashboard (pixels)
input int      DashboardPosY = 10;           // Position Y du dashboard (pixels)
input int      DashboardWidth = 420;         // Largeur du dashboard (pixels)
input int      DashboardHeight = 220;        // Hauteur du dashboard (pixels)
input bool     EnableSound = true;           // Activer les alertes sonores
input double MaxSpreadPips = 10.0; // Tolérance max du spread en pips
//===================================================
// SECTION 5 : VARIABLES GLOBALES
//===================================================

double          g_LastEquity      = 0.0;     // Dernière valeur d'equity
double          g_LastBalance     = 0.0;     // Dernière valeur de balance
double          g_ATRValue        = 0.0;     // Valeur ATR courante
string          g_SymbolGold1     = "GOLD";  // Premier symbole pour l'or
string          g_SymbolGold2     = "XAUUSD";// Deuxième symbole pour l'or
bool            g_IsGold          = false;   // Si le symbole courant est l'or
bool            ea_is_active      = true;    // Statut d'activation de l'EA
bool            EnableSuperTrend  = true;    // Statut d'activation SuperTrend

// Tableaux pour le suivi des performances
StrategyStats strategies[];
int strategies_total = 0;
DailyStats day_stats[];

// Handles et objets globaux
CTrade trade;                               // Objet pour exécuter les trades
CPositionInfo positionInfo;                 // Information sur les positions
CHistoryOrderInfo historyOrder;             // Information historique
CDealInfo dealInfo;                         // Information sur les deals
int macdHandle;                             // Handle MACD
int rsiHandle;                              // Handle RSI

// Suivi du temps
datetime lastPerformanceSaveTime = 0;       // Dernière sauvegarde
const int PERFORMANCE_SAVE_INTERVAL = 3600; // Intervalle de sauvegarde (sec)

// Performances des stratégies
SStrategyPerformance strategyPerformance[STRATEGY_COUNT];
SSymbolStats stats[MAX_SYMBOLS];
int symbolCount = 0;

// Suivi des trades
datetime lastTradeTime = 0;                 // Heure du dernier trade
ulong lastTradeTicket = 0;                  // Ticket du dernier trade

//===================================================
// SECTION 6 : CLASSES PRINCIPALES
//===================================================

//+------------------------------------------------------------------+
//| Classe CRiskManager - Gestion avancée des risques               |
//+------------------------------------------------------------------+
class CRiskManager {
private:
   double maxDailyLossPercent;              // Perte quotidienne max (%)
   double maxLossPercent;                   // Perte max par trade (%)
   int maxConsecutiveLosses;                // Pertes consécutives max
   int pauseAfterLosses;                    // Pause après X pertes
   int pauseDurationMinutes;                // Durée de pause (minutes)
   int consecutiveLosses;                   // Compteur de pertes consécutives
   datetime pauseUntil;                     // Heure de fin de pause
   datetime lastTradeTime;                  // Heure du dernier trade

public:
   // Constructeur
   CRiskManager(double dailyLossPct, double lossPct, int maxConsLoss, int pauseLoss, int pauseMin) :
      maxDailyLossPercent(dailyLossPct),
      maxLossPercent(lossPct),
      maxConsecutiveLosses(maxConsLoss),
      pauseAfterLosses(pauseLoss),
      pauseDurationMinutes(pauseMin),
      consecutiveLosses(0),
      pauseUntil(0),
      lastTradeTime(0) {}

   // Vérifie si le trading est autorisé
   bool IsTradeAllowed() const {
      if (pauseUntil > TimeCurrent()) {
         Print("⛔ Pause de trading active jusqu'à ", TimeToString(pauseUntil, TIME_MINUTES));
         return false;
      }

      double balance = AccountInfoDouble(ACCOUNT_BALANCE);
      double equity = AccountInfoDouble(ACCOUNT_EQUITY);
      if (balance <= 0) return false;

      double dailyLoss = ((balance - equity) / balance) * 100.0;

      if (dailyLoss >= maxDailyLossPercent) {
         PrintFormat("❌ Limite de perte quotidienne dépassée: %.2f%% ≥ %.2f%%", dailyLoss, maxDailyLossPercent);
         return false;
      }

      if (consecutiveLosses >= maxConsecutiveLosses) {
         PrintFormat("❌ Limite de pertes consécutives atteinte: %d", consecutiveLosses);
         return false;
      }

      return true;
   }

   // Met à jour les résultats du trade
   void UpdateTradeResult(double profit) {
      if (profit < 0) {
         consecutiveLosses++;
         if (consecutiveLosses >= pauseAfterLosses) {
            pauseUntil = TimeCurrent() + pauseDurationMinutes * 60;
            PrintFormat("🚫 Pause de trading pour %d minutes après %d pertes", pauseDurationMinutes, consecutiveLosses);
         }
      } else {
         consecutiveLosses = 0;
      }
      lastTradeTime = TimeCurrent();
   }

   // Calcule la taille de la position
   double CalculatePositionSize(double entry, double stopLoss) const {
      if (entry <= 0 || stopLoss <= 0) {
         Print("❗ Prix ou SL invalide pour le calcul des lots");
         return 0.0;
      }

      double stopDistance = MathAbs(entry - stopLoss);
      if (stopDistance < _Point) {
         Print("❗ SL trop proche du prix d'entrée");
         return 0.0;
      }

      double riskAmount = AccountInfoDouble(ACCOUNT_BALANCE) * maxLossPercent / 100.0;

      double tickValue = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
      double tickSize = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE);
      double lotStep = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_STEP);
      double minLot = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN);
      double maxLot = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MAX);

      if (tickValue == 0 || tickSize == 0 || lotStep == 0) {
         Print("❗ Information marché indisponible (taille/valeur du tick)");
         return 0.0;
      }

      double costPerLot = stopDistance / tickSize * tickValue;
      if (costPerLot <= 0) {
         Print("❗ Distance de stop ou valeurs de tick invalides");
         return 0.0;
      }

      double rawLots = riskAmount / costPerLot;
      double roundedLots = MathFloor(rawLots / lotStep) * lotStep;

      // Application des limites
      roundedLots = MathMax(minLot, MathMin(roundedLots, maxLot));

      if (roundedLots < minLot) {
         PrintFormat("❗ Taille de lot calculée %.2f en dessous du minimum %.2f", roundedLots, minLot);
         return 0.0;
      }

      return roundedLots;
   }

   // Compte les positions ouvertes
   int GetOpenPositionsCount(string symbol) const {
      int count = 0;
      for (int i = 0; i < PositionsTotal(); i++) {
         ulong ticket = PositionGetTicket(i);
         if (PositionSelectByTicket(ticket)) {
            string sym = PositionGetString(POSITION_SYMBOL);
            int magic = (int)PositionGetInteger(POSITION_MAGIC);
            if (sym == symbol && magic == MagicNumber) {
               count++;
            }
         }
      }
      return count;
   }

   // Vérifie le délai minimum entre les trades
   bool CheckMinTimeBetweenTrades(int minMinutes) const {
      if (lastTradeTime == 0) return true;
      return (TimeCurrent() - lastTradeTime) >= (minMinutes * 60);
   }

   // Réinitialise les pertes consécutives
   void ResetConsecutiveLosses() {
      consecutiveLosses = 0;
      pauseUntil = 0;
      Print("✅ Pertes consécutives réinitialisées");
   }
};

//+------------------------------------------------------------------+
//| Classe CStrategyManager - Gestion des stratégies et indicateurs |
//+------------------------------------------------------------------+
class CStrategyManager {
private:
   int macdHandle;                          // Handle MACD standard
   int rsiHandle;                           // Handle RSI
   int atrHandle;                           // Handle ATR
   int adxHandle, bbHandle;                 // Handles ADX et Bollinger Bands
   int emaHandle, ema200Handle;             // Handles EMA
   int superTrendHandle;                    // Handle SuperTrend
   int checklistMacdHandle;                 // Handle MACD pour la checklist

public:
   // Constructeur
   CStrategyManager() :
      macdHandle(INVALID_HANDLE),
      rsiHandle(INVALID_HANDLE),
      atrHandle(INVALID_HANDLE),
      adxHandle(INVALID_HANDLE),
      bbHandle(INVALID_HANDLE),
      emaHandle(INVALID_HANDLE),
      ema200Handle(INVALID_HANDLE),
      superTrendHandle(INVALID_HANDLE),
      checklistMacdHandle(INVALID_HANDLE) {}

   // Initialise tous les indicateurs
   bool InitializeIndicators() {
      ReleaseAllHandles();
      
      // Initialisation des indicateurs de base (obligatoires)
      if(!InitIndicatorWithRetry(macdHandle, iMACD(_Symbol, _Period, 12, 26, 9, PRICE_CLOSE), "MACD")) return false;
      if(!InitIndicatorWithRetry(checklistMacdHandle, iMACD(_Symbol, _Period, Checklist_MACD_Fast, Checklist_MACD_Slow, Checklist_MACD_Signal, PRICE_CLOSE), "Checklist MACD")) return false;
      if(!InitIndicatorWithRetry(adxHandle, iADX(_Symbol, _Period, 14), "ADX")) return false;
      if(!InitIndicatorWithRetry(atrHandle, iATR(_Symbol, _Period, 14), "ATR")) return false;
      if(!InitIndicatorWithRetry(rsiHandle, iRSI(_Symbol, _Period, 14, PRICE_CLOSE), "RSI")) return false;
      if(!InitIndicatorWithRetry(bbHandle, iBands(_Symbol, _Period, 20, 0, 2.0, PRICE_CLOSE), "Bollinger Bands")) return false;
      if(!InitIndicatorWithRetry(emaHandle, iMA(_Symbol, _Period, 20, 0, MODE_EMA, PRICE_CLOSE), "EMA20")) return false;
      if(!InitIndicatorWithRetry(ema200Handle, iMA(_Symbol, _Period, 200, 0, MODE_EMA, PRICE_CLOSE), "EMA200")) return false;

      // Initialisation conditionnelle du SuperTrend
      if(EnableSuperTrend) {
         if(!InitIndicatorWithRetry(superTrendHandle, iCustom(_Symbol, _Period, "SuperTrend", SuperTrend_ATRPeriod, SuperTrend_Multiplier), "SuperTrend")) {
            Print("Warning: Échec d'initialisation SuperTrend - stratégie désactivée");
            EnableSuperTrend = false;
         } else {
            // Vérification supplémentaire tolérante
            double testBuffer[1];
            if(CopyBuffer(superTrendHandle, 0, 0, 1, testBuffer) <= 0 || !MathIsValidNumber(testBuffer[0]) || testBuffer[0] == EMPTY_VALUE) {
               Print("⚠️ Données SuperTrend suspectes - stratégie désactivée par précaution");
               EnableSuperTrend = false;
            } else {
               Print("✅ SuperTrend initialisé avec une valeur = ", testBuffer[0]);
            }
         }
      }

      Print("Tous les indicateurs initialisés avec succès");
      return AreIndicatorsReady();
   }

   // Vérifie l'état des indicateurs
   bool CheckIndicators() {
      if(macdHandle == INVALID_HANDLE || 
         checklistMacdHandle == INVALID_HANDLE || 
         adxHandle == INVALID_HANDLE || 
         atrHandle == INVALID_HANDLE || 
         rsiHandle == INVALID_HANDLE || 
         bbHandle == INVALID_HANDLE || 
         emaHandle == INVALID_HANDLE || 
         ema200Handle == INVALID_HANDLE) {
         Print("Un ou plusieurs handles d'indicateurs sont invalides");
         return false;
      }
      if(EnableSuperTrend && superTrendHandle == INVALID_HANDLE) {
         Print("L'indicateur SuperTrend est activé mais le handle est invalide");
         return false;
      }
      return true;
   }

   // Retourne le handle ATR
   int GetATRHandle() {
      return atrHandle;
   }

   // Libère tous les handles
   void ReleaseAllHandles() {
      if(macdHandle != INVALID_HANDLE)       { IndicatorRelease(macdHandle); macdHandle = INVALID_HANDLE; }
      if(rsiHandle != INVALID_HANDLE)        { IndicatorRelease(rsiHandle); rsiHandle = INVALID_HANDLE; }
      if(atrHandle != INVALID_HANDLE)        { IndicatorRelease(atrHandle); atrHandle = INVALID_HANDLE; }
      if(adxHandle != INVALID_HANDLE)        { IndicatorRelease(adxHandle); adxHandle = INVALID_HANDLE; }
      if(bbHandle != INVALID_HANDLE)         { IndicatorRelease(bbHandle); bbHandle = INVALID_HANDLE; }
      if(emaHandle != INVALID_HANDLE)        { IndicatorRelease(emaHandle); emaHandle = INVALID_HANDLE; }
      if(ema200Handle != INVALID_HANDLE)     { IndicatorRelease(ema200Handle); ema200Handle = INVALID_HANDLE; }
      if(superTrendHandle != INVALID_HANDLE) { IndicatorRelease(superTrendHandle); superTrendHandle = INVALID_HANDLE; }
   }

   // Vérifie si les indicateurs sont prêts
   bool AreIndicatorsReady(bool verbose = true) {
      string missing = "";
      
      if(!IsIndicatorReady(macdHandle)) missing += "MACD,";
      if(!IsIndicatorReady(rsiHandle)) missing += "RSI,";
      if(!IsIndicatorReady(atrHandle)) missing += "ATR,";
      if(!IsIndicatorReady(adxHandle)) missing += "ADX,";
      if(!IsIndicatorReady(bbHandle)) missing += "Bollinger Bands,";
      if(!IsIndicatorReady(emaHandle)) missing += "EMA20,";
      if(!IsIndicatorReady(ema200Handle)) missing += "EMA200,";
      if(EnableSuperTrend && !IsIndicatorReady(superTrendHandle)) missing += "SuperTrend,";

      if(missing != "" && verbose) 
         Print("Indicateurs manquants: ", missing);

      return (missing == "");
   }

   // Vérifie si un indicateur est prêt
   bool IsIndicatorReady(int handle, int min_bars = 100) {
   if(handle == INVALID_HANDLE) return false;

   int calculated = BarsCalculated(handle);
   if(calculated < min_bars) return false;

   // Vérification supplémentaire pour SuperTrend
   if(handle == superTrendHandle) {
      double testValue[1];
      // --- Correction ici : parenthèses et accolade fermantes ---
      if(CopyBuffer(handle, 0, 0, 1, testValue) <= 0 || !MathIsValidNumber(testValue[0])) {
         Print("Données SuperTrend invalides à la position 0");
         return false;
      }
   }

   return true;
}

   // Stratégie Checklist
   bool ChecklistStrategySignal(STradeSignal &signal) {
       
      double ema200[2], rsi[2], adx[2], atr[1], macdMain[2], macdSignal[2];
      if(!SafeCopyBuffer(ema200Handle, 0, 1, 2, ema200, "EMA200") ||
         !SafeCopyBuffer(rsiHandle, 0, 1, 2, rsi, "RSI") ||
         !SafeCopyBuffer(adxHandle, 0, 1, 2, adx, "ADX") ||
         !SafeCopyBuffer(atrHandle, 0, 0, 1, atr, "ATR") ||
         !SafeCopyBuffer(checklistMacdHandle, 0, 1, 2, macdMain, "MACD Main") ||
         !SafeCopyBuffer(checklistMacdHandle, 1, 1, 2, macdSignal, "MACD Signal")) {
         Print("Échec de la copie des buffers d'indicateurs: ", GetLastError());
         signal.valid = false;
         return false;
      }
      
      Print("CALL GETSPREADPIPS ", _Symbol);
      double spread_pips = GetSpreadPips();
         if(spread_pips > MaxSpreadPips) {
         signal.valid = false;
         signal.comment = StringFormat("Filtre marché : spread trop élevé (%.1f pips, max %.1f)", spread_pips, MaxSpreadPips);
         PrintFormat("Spread trop élevé pour %s: %.1f pips (max: %.1f)", _Symbol, spread_pips, MaxSpreadPips);
         return false;
         }
      double price      = SymbolInfoDouble(_Symbol, SYMBOL_BID);
      double minATR     = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE) * 10;
      double minADX     = 20;
      double minRSI     = 40, maxRSI = 60;
      MqlDateTime tm;
      TimeToStruct(TimeCurrent(), tm);
      int hour = tm.hour;

      // Filtre horaire
      if(hour < 7 || hour > 21) {
         signal.valid = false;
         signal.comment = "Filtre horaire : hors session";
         return false;
      }

      // Filtres marché
     

      // Vérification des confirmations
      int confirmations = 0;
      STradeSignal st1, st2, st3, st4, st5;
      if(EnableSuperTrend && DetectSuperTrendSignal(st1) && st1.valid) confirmations++;
      if(DetectSRRetestSignal(st2)       && st2.valid) confirmations++;
      if(DetectBreakoutSignal(st3)       && st3.valid) confirmations++;
      if(DetectPullbackEMASignal(st4)    && st4.valid) confirmations++;
      if(DetectScalpingSignal(st5)       && st5.valid) confirmations++;

      if(confirmations < 2) {
         signal.valid = false;
         signal.comment = "Pas assez de signaux convergents";
         return false;
      }

      // Décision finale
      int buyVotes  = (st1.isBuySignal ? 1 : 0) + (st2.isBuySignal ? 1 : 0) + 
                     (st3.isBuySignal ? 1 : 0) + (st4.isBuySignal ? 1 : 0) + 
                     (st5.isBuySignal ? 1 : 0);
      int sellVotes = 5 - buyVotes;
      signal.isBuySignal = (buyVotes > sellVotes);
      signal.price = price;
      SetStopTp(signal, signal.isBuySignal);
      signal.valid = true;
      signal.comment = StringFormat("ChecklistStrategy (%d confirmations, EMA/ADX/ATR/RSI/MACD/Spread/Drawdown/News OK)", confirmations);
      return true;
   }
   
   // Détection du signal SuperTrend
   bool DetectSuperTrendSignal(STradeSignal &signal) {
       
      signal.valid = false;
      
      if(!EnableSuperTrend || superTrendHandle == INVALID_HANDLE) {
         return false;
      }

      // Double vérification des données
      if(!WaitForSuperTrendData(superTrendHandle)) {
         ResetSuperTrendHandle();
         if(!WaitForSuperTrendData(superTrendHandle)) {
            return false;
         }
      }

      double supertrend[3];
      bool superTrendOk = false;
      for(int start = 0; start <= 2; start++) {
         if(SafeCopyBuffer(superTrendHandle, 0, start, 3, supertrend, "SuperTrend")) {
            superTrendOk = true;
            break;
         }
      }

      if(!superTrendOk) {
         Print("⚠️ SuperTrend indisponible après plusieurs tentatives — skip propre");
         return false;
      }

      // Validation des valeurs
      for(int i = 0; i < 3; i++) {
         if(supertrend[i] == EMPTY_VALUE || !MathIsValidNumber(supertrend[i]) || 
            supertrend[i] > 1e300 || supertrend[i] < -1e300) {
            Print("Valeur SuperTrend invalide à ", i, ": ", supertrend[i]);
            ResetSuperTrendHandle();
            return false;
         }
      }

      double price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
      double ema200 = iMA(_Symbol, _Period, 200, 0, MODE_EMA, PRICE_CLOSE);
      
      // Signal d'achat
      if(supertrend[1] < price && ema200 < price) {
         if(supertrend[2] < iClose(_Symbol, _Period, 2)) {
            signal.isBuySignal = true;
            signal.price = price;
            SetStopTp(signal, true);
            signal.valid = true;
            signal.comment = "SuperTrend BUY (Confirmed)";
            signal.strategy = STRAT_SUPERTREND;
            return true;
         }
      }
      // Signal de vente
      else if(supertrend[1] > price && ema200 > price) {
         if(supertrend[2] > iClose(_Symbol, _Period, 2)) {
            signal.isBuySignal = false;
            signal.price = price;
            SetStopTp(signal, false);
            signal.valid = true;
            signal.comment = "SuperTrend SELL (Confirmed)";
            signal.strategy = STRAT_SUPERTREND;
            return true;
         }
      }
      
      return false;
   }
   
   // Détection du signal Retest SR
   bool DetectSRRetestSignal(STradeSignal &signal) {
       
      double srLevels[50];
      int nbLevels = LoadSRLevels(srLevels);
      if(nbLevels == 0) {
         signal.valid = false;
         return false;
      }
      
      double price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
      double ema200[1];
      if(!SafeCopyBuffer(ema200Handle, 0, 0, 1, ema200, "EMA200")) {
         signal.valid = false;
         return false;
      }
      
      double tolerance = SymbolInfoDouble(_Symbol, SYMBOL_POINT) * 20;
      for(int i = 0; i < nbLevels; i++) {
         if(MathAbs(price - srLevels[i]) < tolerance && price > ema200[0]) {
            signal.isBuySignal = true;
            signal.price = price;
            SetStopTp(signal, true);
            signal.valid = true;
            signal.comment = "SR Retest BUY";
            return true;
         }
         
         if(MathAbs(price - srLevels[i]) < tolerance && price < ema200[0]) {
            signal.isBuySignal = false;
            signal.price = price;
            SetStopTp(signal, false);
            signal.valid = true;
            signal.comment = "SR Retest SELL";
            return true;
         }
      }
      
      signal.valid = false;
      return false;
   }

   // Détection du signal Breakout
   bool DetectBreakoutSignal(STradeSignal &signal) {
        
      int rangeLookback = 20;
      double highestHigh = iHigh(_Symbol, _Period, 1);
      double lowestLow = iLow(_Symbol, _Period, 1);

      for(int i = 2; i <= rangeLookback+1; i++) {
         double high = iHigh(_Symbol, _Period, i);
         double low = iLow(_Symbol, _Period, i);
         if(high > highestHigh) highestHigh = high;
         if(low < lowestLow) lowestLow = low;
      }

      double price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
      double ema200[1];
      if(!SafeCopyBuffer(ema200Handle, 0, 0, 1, ema200, "EMA200")) {
         signal.valid = false;
         return false;
      }

      // Breakout haussier
      if(price > highestHigh && price > ema200[0]) {
         signal.isBuySignal = true;
         signal.price = price;
         SetStopTp(signal, true);
         signal.valid = true;
         signal.comment = "Breakout BUY";
         return true;
      }
      
      // Breakout baissier
      if(price < lowestLow && price < ema200[0]) {
         signal.isBuySignal = false;
         signal.price = price;
         SetStopTp(signal, false);
         signal.valid = true;
         signal.comment = "Breakout SELL";
         return true;
      }
      
      signal.valid = false;
      return false;
   }

   // Détection du signal Pullback EMA
   bool DetectPullbackEMASignal(STradeSignal &signal) {
        
      double ema20[2], ema200[2], rsi[2], adx[2];
      if(CopyBuffer(emaHandle, 0, 1, 2, ema20) < 2 ||
         CopyBuffer(ema200Handle, 0, 1, 2, ema200) < 2 ||
         CopyBuffer(rsiHandle, 0, 1, 2, rsi) < 2 ||
         CopyBuffer(adxHandle, 0, 1, 2, adx) < 2) {
         Print("Échec de la copie des buffers d'indicateurs: ", GetLastError());
         signal.valid = false;
         return false;
      }
      
      double price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
      double tolerance = SymbolInfoDouble(_Symbol, SYMBOL_POINT) * 10;

      // Pullback haussier
      if(price > ema200[1] && MathAbs(price - ema20[1]) < tolerance && ema20[1] > ema200[1]) {
         double prevClose = iClose(_Symbol, _Period, 1);
         if(prevClose < ema20[1] && adx[1] > 20 && rsi[1] > 40) {
            signal.isBuySignal = true;
            signal.price = price;
            SetStopTp(signal, true);
            signal.valid = true;
            signal.comment = "Pullback EMA BUY (RSI/ADX OK)";
            return true;
         }
      }

      // Pullback baissier
      if(price < ema200[1] && MathAbs(price - ema20[1]) < tolerance && ema20[1] < ema200[1]) {
         double prevClose = iClose(_Symbol, _Period, 1);
         if(prevClose > ema20[1] && adx[1] > 20 && rsi[1] < 60) {
            signal.isBuySignal = false;
            signal.price = price;
            SetStopTp(signal, false);
            signal.valid = true;
            signal.comment = "Pullback EMA SELL (RSI/ADX OK)";
            return true;
         }
      }
      
      signal.valid = false;
      return false;
   }

   // Détection du signal Scalping
   bool DetectScalpingSignal(STradeSignal &signal) {
    
   double ema20[2], ema200[2], rsi[2], adx[2], atr[1];
   if(CopyBuffer(emaHandle, 0, 1, 2, ema20) < 2 ||
      CopyBuffer(ema200Handle, 0, 1, 2, ema200) < 2 ||
      CopyBuffer(rsiHandle, 0, 1, 2, rsi) < 2 ||
      CopyBuffer(adxHandle, 0, 1, 2, adx) < 2 ||
      CopyBuffer(atrHandle, 0, 0, 1, atr) < 1) {
      Print("Échec de la copie des buffers d'indicateurs: ", GetLastError());
      signal.valid = false;
      return false;
   }
    
    Print("CALL GETSPREADPIPS ", _Symbol);
    Print("ENTREE STRATEGIE CHECKLIST : ", _Symbol);
   double spread_pips = GetSpreadPips();
   if(spread_pips > MaxSpreadPips) {
      signal.valid = false;
      signal.comment = StringFormat("Filtre marché : spread trop élevé (%.1f pips, max %.1f)", spread_pips, MaxSpreadPips);
      PrintFormat("Spread trop élevé pour %s: %.1f pips (max: %.1f)", _Symbol, spread_pips, MaxSpreadPips);
      return false;
   }

   double price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double minATR = SymbolInfoDouble(_Symbol, SYMBOL_POINT) * 8;
   double minADX = 18;
   double minMicroPullback = SymbolInfoDouble(_Symbol, SYMBOL_POINT) * 2;

   // Signal d'achat scalping (SUPPRIMER spread < maxSpread)
   if(ema20[1] > ema200[1] && price > ema20[1] && rsi[1] > 35 && rsi[1] < 65 && 
      adx[1] > minADX && atr[0] > minATR && (price - ema20[1]) < minMicroPullback) {
      signal.isBuySignal = true;
      signal.price = price;
      SetStopTp(signal, true);
      signal.valid = true;
      signal.comment = "Scalping BUY (EMA/RSI/ADX/ATR/SPREAD)";
      return true;
   }

   // Signal de vente scalping (SUPPRIMER spread < maxSpread)
   if(ema20[1] < ema200[1] && price < ema20[1] && rsi[1] > 35 && rsi[1] < 65 && 
      adx[1] > minADX && atr[0] > minATR && (ema20[1] - price) < minMicroPullback) {
      signal.isBuySignal = false;
      signal.price = price;
      SetStopTp(signal, false);
      signal.valid = true;
      signal.comment = "Scalping SELL (EMA/RSI/ADX/ATR/SPREAD)";
      return true;
   }

   signal.valid = false;
   return false;
}
///////////////// Fin de la fonction scalping ////////////

private:
   // Attend que les données de l'indicateur soient prêtes
   bool WaitForIndicatorData(int handle, string name, int timeout_ms = 3000) {
      if(handle == INVALID_HANDLE) return false;
      
      uint start = GetTickCount();
      while((int)(GetTickCount() - start) < timeout_ms) {
         if(BarsCalculated(handle) > 100) return true;
         Sleep(50);
      }
      Print(name, " - Timeout après ", timeout_ms, " ms");
      return false;
   }
   
   // Version spéciale pour SuperTrend
   bool WaitForSuperTrendData(int handle, int timeout_ms = 800) {
      if(handle == INVALID_HANDLE) return false;

      int calculated = BarsCalculated(handle);
      int chartBars = iBars(_Symbol, _Period);

      if(calculated > 10 && (chartBars - calculated) < 10) {
          return true;
      }

      uint start = GetTickCount();
      while((int)(GetTickCount() - start) < timeout_ms) {
          calculated = BarsCalculated(handle);
          chartBars = iBars(_Symbol, _Period);
          if(calculated > 10 && (chartBars - calculated) < 10)
              return true;
          Sleep(50);
      }

      Print("SuperTrend Timeout - BarsCalculated: ", calculated, ", Chart bars: ", chartBars);
      return false;
   }

   // Initialise un indicateur avec système de réessai
   bool InitIndicatorWithRetry(int &handle, int newHandle, string name, int max_retries = 3) {
      int attempts = 0;
      while(attempts < max_retries) {
         handle = newHandle;
         if(handle != INVALID_HANDLE) {
            bool isSuperTrend = (name == "SuperTrend");
            if((isSuperTrend && WaitForSuperTrendData(handle)) || 
               (!isSuperTrend && WaitForIndicatorData(handle, name))) {
               return true;
            }
         }
         if(handle != INVALID_HANDLE) IndicatorRelease(handle);
         Sleep(500);
         attempts++;
      }
      Print("Échec d'initialisation de ", name, " après ", max_retries, " tentatives");
      return false;
   }

   // Réinitialise le handle SuperTrend
   void ResetSuperTrendHandle() {
      if(superTrendHandle != INVALID_HANDLE) {
         IndicatorRelease(superTrendHandle);
         superTrendHandle = INVALID_HANDLE;
      }
      superTrendHandle = iCustom(_Symbol, _Period, "SuperTrend", SuperTrend_ATRPeriod, SuperTrend_Multiplier);
      if(superTrendHandle == INVALID_HANDLE) {
         Print("CRITIQUE: Impossible de réinitialiser SuperTrend!");
      } else {
         Print("SuperTrend réinitialisé avec handle: ", superTrendHandle);
      }
   }
};

//+------------------------------------------------------------------+
//| Classe CTradeManager - Gestion des opérations de trading        |
//+------------------------------------------------------------------+
class CTradeManager {
private:
   CRiskManager *riskManager;               // Gestionnaire de risques
   CTrade trade;                            // Objet de trading

public:
   // Constructeur
   CTradeManager(CRiskManager *manager) : riskManager(manager) {
      trade.SetExpertMagicNumber(MagicNumber);
      trade.SetMarginMode();
      trade.SetTypeFillingBySymbol(_Symbol);
      trade.SetDeviationInPoints(Slippage);
   }

   // Exécute un trade basé sur un signal
   bool ExecuteTrade(const STradeSignal &signal) {
      if(!signal.valid || !CanOpenNewPosition(_Symbol)) {
         Print("Impossible d'exécuter le trade - signal invalide ou positions max atteintes");
         return false;
      }

      double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
      double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
      double market_price = signal.isBuySignal ? ask : bid;

      double lots = riskManager.CalculatePositionSize(market_price, signal.sl);
      if(lots <= 0) {
         Print("Taille de lot calculée invalide: ", lots);
         return false;
      }

      if(signal.sl <= 0 || signal.tp <= 0) {
         Print("SL ou TP invalides: SL=", signal.sl, " TP=", signal.tp);
         return false;
      }

     if(!ValidatePrices(market_price, signal.sl, signal.tp, signal.isBuySignal)) {
   Print("SL/TP invalides pour le prix actuel");
   return false;
}

      PrintFormat("\xF0\x9F\x93\x8C Signal reçu : %s | Lots=%.2f | Prix=%.2f | SL=%.2f | TP=%.2f",
                  signal.isBuySignal ? "BUY" : "SELL",
                  lots, signal.price, signal.sl, signal.tp);

      // Envoi sans SL/TP initial pour contourner l'erreur 4753
      bool result = signal.isBuySignal ?
                    trade.Buy(lots, _Symbol, 0, 0, 0, signal.comment) :
                    trade.Sell(lots, _Symbol, 0, 0, 0, signal.comment);

      if(result) {
         ulong deal_ticket = trade.ResultDeal();
         double profit = 0.0;
         if(deal_ticket > 0) {
            profit = HistoryDealGetDouble(deal_ticket, DEAL_PROFIT);
         }

         // Ajout SL/TP après ouverture
         if(!trade.PositionModify(_Symbol, signal.sl, signal.tp)) {
            Print("⚠️ Échec de l'ajout SL/TP après ouverture : ", trade.ResultRetcodeDescription());
         } else {
            PrintFormat("✅ SL/TP appliqués après ouverture : SL=%.5f | TP=%.5f", signal.sl, signal.tp);
         }

         riskManager.UpdateTradeResult(profit);

         if(EnableNotifications) {
            string msg = StringFormat("New %s trade opened via %s. Lots: %.2f SL: %.5f TP: %.5f",
                                      signal.isBuySignal ? "BUY" : "SELL",
                                      EnumToString(signal.strategy),
                                      lots, signal.sl, signal.tp);
            Alert(_Symbol + " " + EnumToString(_Period) + ": " + msg);
            if(EnableSound) PlaySound("alert.wav");
         }
         return true;
      }

      Print("Échec de l'exécution du trade. Erreur: ", GetLastError());
      return false;
   }

   // Gère les positions ouvertes
   void ManagePositions() {
      for(int i = (int)PositionsTotal() - 1; i >= 0; i--) {
         ulong ticket = PositionGetTicket(i);
         if(PositionSelectByTicket(ticket)) {
            string pos_symbol = PositionGetString(POSITION_SYMBOL);
            int pos_magic     = (int)PositionGetInteger(POSITION_MAGIC);

            if(pos_symbol != _Symbol || pos_magic != MagicNumber) continue;

            double entry = PositionGetDouble(POSITION_PRICE_OPEN);
            double tp = PositionGetDouble(POSITION_TP);
            double sl = PositionGetDouble(POSITION_SL);
            double volume = PositionGetDouble(POSITION_VOLUME);
            ENUM_POSITION_TYPE type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);

            ManagePartialClose(ticket, type, entry, sl, volume);
            ManageTrailingStop(ticket, type, entry, sl, tp);
         }
      }
   }

   // Vérifie si une nouvelle position peut être ouverte
   bool CanOpenNewPosition(string symbol) {
      if(riskManager.GetOpenPositionsCount(symbol) >= MAX_POSITIONS_PER_SYMBOL) {
         Print("Max positions (", MAX_POSITIONS_PER_SYMBOL, ") atteint pour ", symbol);
         return false;
      }

      if(!riskManager.CheckMinTimeBetweenTrades(MinMinutesBetweenTrades)) {
         Print("Temps minimum entre les trades non atteint");
         return false;
      }

      return CheckSpreadConditions(symbol);
   }

private:
   // Gère la fermeture partielle
   void ManagePartialClose(ulong ticket, ENUM_POSITION_TYPE type, double entry, double sl, double volume) {
      if(volume < 0.2) return;

      double stopDistance = MathAbs(entry - sl);
      if(stopDistance <= 0) return;

      double currentPrice = (type == POSITION_TYPE_BUY) ? SymbolInfoDouble(_Symbol, SYMBOL_BID) :
                                                          SymbolInfoDouble(_Symbol, SYMBOL_ASK);

      double r = (type == POSITION_TYPE_BUY) ? (currentPrice - entry) / stopDistance :
                                               (entry - currentPrice) / stopDistance;

      if(r >= 1.0) {
         PartialClose(ticket, 0.5);
      }
   }

   // Gère le trailing stop
   void ManageTrailingStop(ulong ticket, ENUM_POSITION_TYPE type, double entry, double &sl, double tp) {
      double atr = iATR(_Symbol, _Period, ATRPeriod);
      double profit = PositionGetDouble(POSITION_PROFIT);

      if(profit > atr * 100) {
         double newSL = 0;
         if(type == POSITION_TYPE_BUY) {
            newSL = SymbolInfoDouble(_Symbol, SYMBOL_BID) - atr;
            if(newSL > sl && newSL > entry) {
               trade.PositionModify(ticket, newSL, tp);
            }
         } else {
            newSL = SymbolInfoDouble(_Symbol, SYMBOL_ASK) + atr;
            if(newSL < sl && newSL < entry) {
               trade.PositionModify(ticket, newSL, tp);
            }
         }
      }
   }

   // Ferme partiellement une position
   void PartialClose(ulong ticket, double percentage) {
      if(PositionSelectByTicket(ticket)) {
         double vol = PositionGetDouble(POSITION_VOLUME);
         double closeLots = MathMax(SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN), vol * percentage);
         if(closeLots > 0) {
            trade.PositionClosePartial(ticket, closeLots);
         }
      }
   }

   // Vérifie les conditions de spread
   bool CheckSpreadConditions(string symbol) {
      double spread = SymbolInfoInteger(symbol, SYMBOL_SPREAD) * SymbolInfoDouble(symbol, SYMBOL_POINT);
      double maxSpread = 0;

      if(symbol == "EURUSD") maxSpread = 1.5 * 0.0001;
      else if(symbol == "USDJPY") maxSpread = 3.0 * 0.01;
      else if(symbol == "EURGBP") maxSpread = 2.0 * 0.0001;
      else if(symbol == "XAUUSD" || symbol == "GOLD") maxSpread = 5.0 * 0.01;
      else if(symbol == "BTCUSD") maxSpread = 100.0;
      else maxSpread = 12 * SymbolInfoDouble(symbol, SYMBOL_POINT);

      if(spread > maxSpread) {
         PrintFormat("Spread trop élevé pour %s: %.1f pips (max: %.1f)", 
                     symbol, spread / SymbolInfoDouble(symbol, SYMBOL_POINT), 
                     maxSpread / SymbolInfoDouble(symbol, SYMBOL_POINT));
         return false;
      }

      return true;
   }

   // Validation des prix SL/TP
   bool ValidatePrices(double price, double sl, double tp, bool isBuy) {
      double point = SymbolInfoDouble(_Symbol, SYMBOL_POINT);
      double minStopLevel = SymbolInfoInteger(_Symbol, SYMBOL_TRADE_STOPS_LEVEL) * point;
      if (minStopLevel <= 0) minStopLevel = point * 2;

      // Distance minimale adaptée selon le symbole
      double customMinDist = minStopLevel;
      if (StringFind(_Symbol, "BTCUSD") >= 0) customMinDist = MathMax(minStopLevel, 100.0 * point);
      else if (StringFind(_Symbol, "XAUUSD") >= 0 || StringFind(_Symbol, "GOLD") >= 0) customMinDist = MathMax(minStopLevel, 10.0 * point);

      // Vérification basique
      if (sl <= 0 || tp <= 0) {
         PrintFormat("❌ SL/TP invalides (0 ou négatif): SL=%.5f TP=%.5f", sl, tp);
         return false;
      }

      // Vérification cohérence BUY
      if (isBuy) {
         if (sl >= price - customMinDist) {
            PrintFormat("❌ SL trop proche/incohérent pour BUY : SL=%.5f prix=%.5f min=%.5f", sl, price, customMinDist);
            return false;
         }
         if (tp <= price + customMinDist) {
            PrintFormat("❌ TP trop proche/incohérent pour BUY : TP=%.5f prix=%.5f min=%.5f", tp, price, customMinDist);
            return false;
         }
      }
      // Vérification cohérence SELL
      else {
         if (sl <= price + customMinDist) {
            PrintFormat("❌ SL trop proche/incohérent pour SELL : SL=%.5f prix=%.5f min=%.5f", sl, price, customMinDist);
            return false;
         }
         if (tp >= price - customMinDist) {
            PrintFormat("❌ TP trop proche/incohérent pour SELL : TP=%.5f prix=%.5f min=%.5f", tp, price, customMinDist);
            return false;
         }
      }

      // Protection contre distances aberrantes
      double maxReasonable = 10000 * point;
      if (MathAbs(price - sl) > maxReasonable || MathAbs(tp - price) > maxReasonable) {
         PrintFormat("❌ SL/TP trop éloignés : SL=%.5f TP=%.5f prix=%.5f", sl, tp, price);
         return false;
      }

      return true;
   }
};

//===================================================
// SECTION 7 : INSTANCES GLOBALES ET UTILITAIRES
//===================================================

// Instances globales des gestionnaires
CRiskManager riskManager(MaxDailyLossPercent, MaxLossPercent, MaxConsecutiveLosses, PauseAfterLosses, PauseDurationMinutes);
CStrategyManager strategyManager;
CTradeManager tradeManager(&riskManager);

//+------------------------------------------------------------------+
//| Fonctions utilitaires                                           |
//+------------------------------------------------------------------+

// Fonction SafeCopyBuffer améliorée
bool SafeCopyBuffer(int handle, int buffer_num, int start_pos, int count, double &buffer[], string label = "") {
   // Vérification du handle
   if(handle == INVALID_HANDLE) {
      Print(label, " - Handle invalide");
      return false;
   }

   // Vérification des données disponibles
   if(Bars(_Symbol, _Period) < 50) {
      Print(label, " - Pas assez de barres chargées sur le graphique (", Bars(_Symbol, _Period), ")");
      return false;
   }

   // Attente que l'indicateur ait calculé suffisamment de barres
   int attempts = 0;
   int barsAvailable = BarsCalculated(handle);

   while((barsAvailable < start_pos + count || barsAvailable <= 0) && attempts < MAX_RETRIES) {
      Sleep(100);
      attempts++;
      barsAvailable = BarsCalculated(handle);
   }

   // Échec après plusieurs tentatives
   if(barsAvailable < start_pos + count || barsAvailable <= 0) {
      Print(label, " - Données insuffisantes (", barsAvailable, " bars, besoin de ", (start_pos + count), ") après ", MAX_RETRIES, " tentatives");
      return false;
   }

   // Lecture du buffer
   int copied = CopyBuffer(handle, buffer_num, start_pos, count, buffer);
   if(copied <= 0) {
      int err = GetLastError();
      Print(label, " - Échec de CopyBuffer (erreur ", err, ")");
      return false;
   }

   // Vérification du nombre d'éléments copiés
   if(copied != count) {
      Print(label, " - Copie partielle: ", copied, "/", count, " éléments");
      return false;
   }

   // Vérification du contenu du buffer
   int validValues = 0;
   for(int i = 0; i < count; i++) {
      if(buffer[i] != EMPTY_VALUE && MathIsValidNumber(buffer[i])) {
         validValues++;
      } else {
         Print(label, " - Données invalides ignorées à la position ", i, " (valeur = ", buffer[i], ")");
      }
   }

   if(validValues == 0) {
      Print(label, " - Aucune donnée valide reçue (", count, " valeurs demandées)");
      return false;
   }

   return true;
}

// Charge les niveaux de support/résistance
int LoadSRLevels(double &levels[]) {
   ArrayResize(levels, 0);
   int lookback = 100;
   int bars = (int)Bars(_Symbol, _Period);
   if(bars < lookback) lookback = bars;
   
   // Détection des highs et lows significatifs
   for(int i = 3; i < lookback-3; i++) {
      double high1 = iHigh(_Symbol, _Period, i+1);
      double high2 = iHigh(_Symbol, _Period, i);
      double high3 = iHigh(_Symbol, _Period, i-1);
      
      if(high2 > high1 && high2 > high3) {
         ArrayResize(levels, ArraySize(levels)+1);
         levels[ArraySize(levels)-1] = high2;
      }
      
      double low1 = iLow(_Symbol, _Period, i+1);
      double low2 = iLow(_Symbol, _Period, i);
      double low3 = iLow(_Symbol, _Period, i-1);
      
      if(low2 < low1 && low2 < low3) {
         ArrayResize(levels, ArraySize(levels)+1);
         levels[ArraySize(levels)-1] = low2;
      }
   }
   
   // Fusion des niveaux proches
   for(int i = 0; i < ArraySize(levels); i++) {
      for(int j = i+1; j < ArraySize(levels); j++) {
         if(MathAbs(levels[i] - levels[j]) < 10*_Point) {
            levels[i] = (levels[i] + levels[j]) / 2;
            for(int k = j; k < ArraySize(levels)-1; k++) {
               levels[k] = levels[k+1];
            }
            ArrayResize(levels, ArraySize(levels)-1);
            j--;
         }
      }
   }
   
   return ArraySize(levels);
}

// Définit les niveaux SL/TP
void SetStopTp(STradeSignal &signal, bool isBuy) {
    double atr = iATR(_Symbol, _Period, ATRPeriod);
    if (atr <= 0) {
        Print("ATR invalide : ", atr);
        signal.valid = false;
        return;
    }

    double point = SymbolInfoDouble(_Symbol, SYMBOL_POINT);
    double minStopLevelPoints = (double)SymbolInfoInteger(_Symbol, SYMBOL_TRADE_STOPS_LEVEL);
    double minStopLevel = minStopLevelPoints * point;
    if (minStopLevel <= 0) minStopLevel = point * 2;

    PrintFormat("DEBUG: SYMBOL_TRADE_STOPS_LEVEL=%d -> minStopLevel=%.5f", minStopLevelPoints, minStopLevel);

    double stopDistance = MathMax(atr * 1.5, minStopLevel * 2);
    double maxDistance = atr * 4.0;
    double ratio = 2.0;
    double price = isBuy ? SymbolInfoDouble(_Symbol, SYMBOL_ASK) : SymbolInfoDouble(_Symbol, SYMBOL_BID);

    // Limiter stopDistance à maxDistance
    stopDistance = MathMin(stopDistance, maxDistance);

    if (isBuy) {
        signal.sl = price - stopDistance;
        signal.tp = price + stopDistance * ratio;
    } else {
        signal.sl = price + stopDistance;
        signal.tp = price - stopDistance * ratio;
    }

    PrintFormat("SL/TP final => SL=%.5f | TP=%.5f | distance=%.5f", signal.sl, signal.tp, stopDistance);

    // Vérification finale
    if (!ValidatePrices(price, signal.sl, signal.tp, isBuy)) {
        Print("SL/TP invalides après calcul. Signal abandonné.");
        signal.valid = false;
    }
    else 
    {
        signal.valid = true;
    }
}

//===================================================
// SECTION 8 : FONCTIONS DU DASHBOARD
//===================================================

// Dessine une barre de progression
void DrawProgressBar(string name, int x, int y, double percent, color clrPositive, color clrNegative) {
    int width = 150;
    int height = 15;
    
    ObjectCreate(0, name+"_BG", OBJ_RECTANGLE_LABEL, 0, 0, 0);
    ObjectSetInteger(0, name+"_BG", OBJPROP_XDISTANCE, x);
    ObjectSetInteger(0, name+"_BG", OBJPROP_YDISTANCE, y);
    ObjectSetInteger(0, name+"_BG", OBJPROP_XSIZE, width);
    ObjectSetInteger(0, name+"_BG", OBJPROP_YSIZE, height);
    ObjectSetInteger(0, name+"_BG", OBJPROP_COLOR, clrGray);
    ObjectSetInteger(0, name+"_BG", OBJPROP_BACK, true);
    
    int progressWidth = (int)(width * percent / 100.0);
    ObjectCreate(0, name+"_FG", OBJ_RECTANGLE_LABEL, 0, 0, 0);
    ObjectSetInteger(0, name+"_FG", OBJPROP_XDISTANCE, x);
    ObjectSetInteger(0, name+"_FG", OBJPROP_YDISTANCE, y);
    ObjectSetInteger(0, name+"_FG", OBJPROP_XSIZE, progressWidth);
    ObjectSetInteger(0, name+"_FG", OBJPROP_YSIZE, height);
    ObjectSetInteger(0, name+"_FG", OBJPROP_COLOR, percent >= 50 ? clrPositive : clrNegative);
    ObjectSetInteger(0, name+"_FG", OBJPROP_BACK, false);
}

// Crée un bouton
void CreateButton(string name, string text, int x, int y, int width, int height, color bgColor) {
    ObjectCreate(0, name, OBJ_RECTANGLE_LABEL, 0, 0, 0);
    ObjectSetInteger(0, name, OBJPROP_XDISTANCE, x);
    ObjectSetInteger(0, name, OBJPROP_YDISTANCE, y);
    ObjectSetInteger(0, name, OBJPROP_XSIZE, width);
    ObjectSetInteger(0, name, OBJPROP_YSIZE, height);
    ObjectSetInteger(0, name, OBJPROP_COLOR, bgColor);
    ObjectSetInteger(0, name, OBJPROP_BACK, false);
    
    ObjectCreate(0, name+"_TXT", OBJ_LABEL, 0, 0, 0);
    ObjectSetInteger(0, name+"_TXT", OBJPROP_XDISTANCE, x + width/2 - StringLen(text)*3);
    ObjectSetInteger(0, name+"_TXT", OBJPROP_YDISTANCE, y + height/2 - 8);
    ObjectSetInteger(0, name+"_TXT", OBJPROP_COLOR, clrWhite);
    ObjectSetInteger(0, name+"_TXT", OBJPROP_FONTSIZE, 10);
    ObjectSetString(0, name+"_TXT", OBJPROP_TEXT, text);
}

// Dessine l'arrière-plan du dashboard
void DrawDashboardBackground(int x, int y, int width, int height) {
   string bgName = "DASHBOARD_BG";
   ObjectDelete(0, bgName);
   ObjectCreate(0, bgName, OBJ_RECTANGLE_LABEL, 0, 0, 0);
   ObjectSetInteger(0, bgName, OBJPROP_CORNER, 0);
   ObjectSetInteger(0, bgName, OBJPROP_XDISTANCE, x);
   ObjectSetInteger(0, bgName, OBJPROP_YDISTANCE, y);
   ObjectSetInteger(0, bgName, OBJPROP_XSIZE, width);
   ObjectSetInteger(0, bgName, OBJPROP_YSIZE, height);
   ObjectSetInteger(0, bgName, OBJPROP_COLOR, C'10,20,40');
   ObjectSetInteger(0, bgName, OBJPROP_BACK, true);
   ObjectSetInteger(0, bgName, OBJPROP_SELECTABLE, false);
}

// Met à jour le dashboard
void UpdateDashboard() {
   DeleteDashboard();

   int x = DashboardPosX;
   int y = DashboardPosY;

   // Crée le panneau principal
   ObjectCreate(0, "DASHBOARD_PANEL", OBJ_RECTANGLE_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "DASHBOARD_PANEL", OBJPROP_XDISTANCE, x);
   ObjectSetInteger(0, "DASHBOARD_PANEL", OBJPROP_YDISTANCE, y);
   ObjectSetInteger(0, "DASHBOARD_PANEL", OBJPROP_XSIZE, DashboardWidth);
   ObjectSetInteger(0, "DASHBOARD_PANEL", OBJPROP_YSIZE, DashboardHeight + 150);
   ObjectSetInteger(0, "DASHBOARD_PANEL", OBJPROP_CORNER, 0);
   ObjectSetInteger(0, "DASHBOARD_PANEL", OBJPROP_COLOR, C'30,30,30');
   ObjectSetInteger(0, "DASHBOARD_PANEL", OBJPROP_BACK, true);
   ObjectSetInteger(0, "DASHBOARD_PANEL", OBJPROP_SELECTABLE, false);

   y += 15;
   int fontSize = 12;

   // Affiche les informations de base
   string header = "PAIR: " + _Symbol + " | TF: " + EnumToString(_Period);
   DisplayLabel("DASHBOARD_PAIR_TF", header, x + 15, y, clrGold, fontSize);
   y += 20;

   string strategy = "STRATEGY: " + LastStrategyUsed();
   DisplayLabel("DASHBOARD_STRATEGY", strategy, x + 15, y, clrWhite, fontSize);
   y += 20;

   double balance = AccountInfoDouble(ACCOUNT_BALANCE);
   double equity = AccountInfoDouble(ACCOUNT_EQUITY);
   DisplayLabel("DASHBOARD_BALANCE", "BALANCE: " + DoubleToString(balance, 2), x + 15, y, clrWhite, fontSize);
   y += 20;
   DisplayLabel("DASHBOARD_EQUITY", "EQUITY: " + DoubleToString(equity, 2), x + 15, y, clrWhite, fontSize);
   y += 20;

   // Affiche le profit du jour
   double profitToday = GetDailyProfit();
   color profitColor = profitToday >= 0 ? clrLime : clrOrange;
   DisplayLabel("DASHBOARD_PROFIT_DAY", "DAILY PROFIT: " + FormatSigned(profitToday, 2), x + 15, y, profitColor, fontSize, true);
   y += 20;

   // Affiche le spread actuel
   double spread = SymbolInfoInteger(_Symbol, SYMBOL_SPREAD) * _Point;
   DisplayLabel("DASHBOARD_SPREAD", "CURRENT SPREAD: " + DoubleToString(spread, Digits()), x + 15, y, clrWhite, fontSize);
   y += 20;

   y += 10;
   DisplayLabel("DASHBOARD_SEPARATOR", "----------- DAILY STATISTICS -----------", x + 15, y, clrAqua, fontSize);
   y += 20;

   // Statistiques quotidiennes
   int totalTradesToday, winTradesToday, lossTradesToday;
   GetTodayStats(totalTradesToday, winTradesToday, lossTradesToday);

   DisplayLabel("DASHBOARD_TODAY_TRADES", "TOTAL TRADES TODAY: " + IntegerToString(totalTradesToday), x + 15, y, clrWhite, fontSize);
   y += 20;

   DisplayLabel("DASHBOARD_TODAY_WINS", "WINS: " + IntegerToString(winTradesToday) + " | LOSSES: " + IntegerToString(lossTradesToday), x + 15, y, clrWhite, fontSize);
   y += 20;

   double plToday = GetDailyProfit();
   double winRateToday = totalTradesToday > 0 ? 100.0 * winTradesToday / totalTradesToday : 0.0;
   DisplayLabel("DASHBOARD_TODAY_PL", "P/L TODAY: " + FormatSigned(plToday, 2), x + 15, y, plToday >= 0 ? clrLime : clrOrange, fontSize, true);
   y += 20;

   // Barre de progression pour le taux de réussite
   DrawProgressBar("WINRATE_BAR", x + 15, y, winRateToday, clrGreen, clrRed);
   DisplayLabel("DASHBOARD_WINRATE", "WIN RATE TODAY: " + DoubleToString(winRateToday, 1) + "%", x + 220, y, clrYellow, fontSize);
   y += 30;

   // Statut de l'EA
   string status = ea_is_active ? "ACTIVE" : "PAUSED";
   color statusColor = ea_is_active ? clrLime : clrRed;
   DisplayLabel("DASHBOARD_STATUS", "STATUS: " + status, x + 15, y, statusColor, 14, true);
   y += 30;
}

// Supprime le dashboard
void DeleteDashboard() {
   ObjectDelete(0, "DASHBOARD_PANEL");

   string elements[] = {
      "DASHBOARD_PAIR_TF",
      "DASHBOARD_STRATEGY",
      "DASHBOARD_BALANCE",
      "DASHBOARD_EQUITY",
      "DASHBOARD_PROFIT_DAY",
      "DASHBOARD_SPREAD",
      "DASHBOARD_SEPARATOR",
      "DASHBOARD_TODAY_TRADES",
      "DASHBOARD_TODAY_WINS",
      "DASHBOARD_TODAY_PL",
      "WINRATE_BAR_BG",
      "WINRATE_BAR_FG",
      "DASHBOARD_WINRATE",
      "DASHBOARD_STATUS",
      "DASHBOARD_TOGGLE",
      "DASHBOARD_TOGGLE_TXT",
      "DASHBOARD_CLOSE",
      "DASHBOARD_CLOSE_TXT"
   };

   for(int i = 0; i < ArraySize(elements); i++)
      ObjectDelete(0, elements[i]);
}

// Affiche un label
void DisplayLabel(string name, string text, int x, int y, color txtColor, int size, bool bold=false) {
   ObjectCreate(0, name, OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, name, OBJPROP_XDISTANCE, x);
   ObjectSetInteger(0, name, OBJPROP_YDISTANCE, y);
   ObjectSetInteger(0, name, OBJPROP_COLOR, txtColor);
   ObjectSetInteger(0, name, OBJPROP_FONTSIZE, size);
   ObjectSetInteger(0, name, OBJPROP_CORNER, 0);
   ObjectSetInteger(0, name, OBJPROP_SELECTABLE, false);
   ObjectSetString(0, name, OBJPROP_TEXT, text);
}

//===================================================
// SECTION 9 : FONCTIONS UTILITAIRES
//===================================================

/// @brief Calcule le spread de la paire courante en pips, compatible avec toutes les paires.
/// @return Spread courant en pips (ex: 1.2 pour 1.2 pips)
double GetSpreadPips() {
   double point = SymbolInfoDouble(_Symbol, SYMBOL_POINT);
   int digits = (int)SymbolInfoInteger(_Symbol, SYMBOL_DIGITS);
   double contract_size = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_CONTRACT_SIZE);
long spread_raw = SymbolInfoInteger(_Symbol, SYMBOL_SPREAD);
   double pip = 1.0;
   if(StringFind(_Symbol, "JPY") >= 0 && digits >= 3)
      pip = 0.01;
   else if(StringFind(_Symbol, "BTC") >= 0 || StringFind(_Symbol, "ETH") >= 0)
      pip = 1.0;
   else if(digits == 5 || digits == 3)
      pip = point * 10.0;
   else if(digits == 4 || digits == 2)
      pip = point * 100.0;
   else
      pip = point * 10.0;

   double spread_pips = spread_raw * point / pip;

   PrintFormat("DEBUG SPREAD: %s | Digits: %d | Point: %f | SpreadRaw: %d | SpreadPips: %.8f | Pip: %f | Contract: %.2f",
            _Symbol, digits, point, spread_raw, spread_pips, pip, contract_size);

   return spread_pips;
}
// 2. Ajout d'une fonction ValidatePrices générique (à placer dans la classe CTradeManager ou en global - ici en global)

/// @brief Vérifie si les prix SL/TP sont valides pour un trade
/// @param entry_price Prix d'entrée (bid/ask selon sens)
/// @param stop_loss SL proposé
/// @param take_profit TP proposé
/// @param isBuy true=achat, false=vente
/// @return true si les prix sont valides
bool ValidatePrices(double entry_price, double stop_loss, double take_profit, bool isBuy) {
   long stops_level = SymbolInfoInteger(_Symbol, SYMBOL_TRADE_STOPS_LEVEL);
   double min_distance = stops_level * _Point;
   if(min_distance < _Point) min_distance = 2 * _Point; // sécurité

   if(isBuy) {
      if(stop_loss >= entry_price || take_profit <= entry_price) return false;
      if((entry_price - stop_loss) < min_distance || (take_profit - entry_price) < min_distance) return false;
   } else {
      if(stop_loss <= entry_price || take_profit >= entry_price) return false;
      if((stop_loss - entry_price) < min_distance || (entry_price - take_profit) < min_distance) return false;
   }
   return true;
}

// Formatte un nombre avec signe
string FormatSigned(double value, int digits=2) {
   if(value >= 0.0)
      return("+" + DoubleToString(value, digits));
   return(DoubleToString(value, digits));
}

// Convertit un timestamp en date seule
datetime DateOfDay(datetime t) {
   MqlDateTime str;
   TimeToStruct(t, str);
   str.hour = 0;
   str.min = 0;
   str.sec = 0;
   return(StructToTime(str));
}

// Retourne la dernière stratégie utilisée
string LastStrategyUsed() {
   if(PositionSelect(_Symbol))
      return PositionGetString(POSITION_COMMENT);
   return "No Active Trade";
}

// Obtient les statistiques du jour
void GetTodayStats(int &totalTrades, int &winTrades, int &lossTrades) {
   totalTrades = 0;
   winTrades = 0;
   lossTrades = 0;

   datetime today = DateOfDay(TimeCurrent());
   int deals = HistoryDealsTotal();

   for(int i = deals - 1; i >= 0; i--) {
      ulong ticket = HistoryDealGetTicket(i);
      datetime dealTime = (datetime)HistoryDealGetInteger(ticket, DEAL_TIME);
      if(dealTime < today)
         break;

      if(HistoryDealGetString(ticket, DEAL_SYMBOL) == _Symbol) {
         double profit = HistoryDealGetDouble(ticket, DEAL_PROFIT);
         totalTrades++;
         if(profit > 0) winTrades++;
         else if(profit < 0) lossTrades++;
      }
   }
}

// Calcule le profit du jour
double GetDailyProfit() {
   double profitToday = 0.0;
   datetime today = DateOfDay(TimeCurrent());
   int deals = HistoryDealsTotal();

   for(int i = deals - 1; i >= 0; i--) {
      ulong ticket = HistoryDealGetTicket(i);
      datetime dealTime = (datetime)HistoryDealGetInteger(ticket, DEAL_TIME);
      if(dealTime < today)
         break;

      if(HistoryDealGetString(ticket, DEAL_SYMBOL) == _Symbol)
         profitToday += HistoryDealGetDouble(ticket, DEAL_PROFIT);
   }
   return profitToday;
}

// Calcule le taux de réussite global
double CalculateWinRate() {
   int totalTrades = 0;
   int winningTrades = 0;

   int totalHistory = HistoryDealsTotal();
   for(int i = totalHistory - 1; i >= 0; i--) {
      ulong dealTicket = HistoryDealGetTicket(i);
      if(dealTicket != 0) {
         double profit = HistoryDealGetDouble(dealTicket, DEAL_PROFIT);
         if(profit != 0.0) {
            totalTrades++;
            if(profit > 0.0)
               winningTrades++;
         }
      }
   }

   if(totalTrades == 0)
      return 0.0;

   return (double)winningTrades / totalTrades * 100.0;
}

// Charge les performances des stratégies
void LoadStrategyPerformance() {
   for(int i = 0; i < STRATEGY_COUNT; i++) {
      string prefix = "STRAT_" + EnumToString(strategyPerformance[i].strategy) + "_";
      strategyPerformance[i].wins = (int)GlobalVariableGet(prefix + "WINS");
      strategyPerformance[i].losses = (int)GlobalVariableGet(prefix + "LOSSES");
      strategyPerformance[i].totalTrades = (int)GlobalVariableGet(prefix + "TOTAL");
      strategyPerformance[i].totalProfit = GlobalVariableGet(prefix + "PROFIT");
      strategyPerformance[i].lastTradeTime = (datetime)GlobalVariableGet(prefix + "LAST_TIME");
   }
}

// Sauvegarde les performances des stratégies
void SaveStrategyPerformance() {
   for(int i = 0; i < STRATEGY_COUNT; i++) {
      string prefix = "STRAT_" + EnumToString(strategyPerformance[i].strategy) + "_";
      GlobalVariableSet(prefix + "WINS", strategyPerformance[i].wins);
      GlobalVariableSet(prefix + "LOSSES", strategyPerformance[i].losses);
      GlobalVariableSet(prefix + "TOTAL", strategyPerformance[i].totalTrades);
      GlobalVariableSet(prefix + "PROFIT", strategyPerformance[i].totalProfit);
      GlobalVariableSet(prefix + "LAST_TIME", (double)strategyPerformance[i].lastTradeTime);
   }
}

// Met à jour les poids des stratégies
void UpdateStrategyWeights() {
   for(int i = 0; i < STRATEGY_COUNT; i++) {
      if(strategyPerformance[i].totalTrades < 5) continue;
      
      double recentWinRate = strategyPerformance[i].wins / (double)MathMax(20, strategyPerformance[i].totalTrades) * 100.0;
      double mediumWinRate = strategyPerformance[i].wins / (double)MathMax(100, strategyPerformance[i].totalTrades) * 100.0;
      
      double atr = iATR(_Symbol, _Period, 14);
      double volatilityFactor = (atr > 0.0005) ? 1.2 : (atr < 0.0002) ? 0.8 : 1.0;
      
      strategyPerformance[i].weight = recentWinRate * 0.5 + mediumWinRate * 0.3 + volatilityFactor * 0.2;
   }
}

// Gestion automatique des stratégies
void AutoManageStrategies() {
   for(int i = 0; i < STRATEGY_COUNT; i++) {
      if(strategyPerformance[i].totalTrades < MinTradesToDisable) continue;
      
      strategyPerformance[i].winRate = (double)strategyPerformance[i].wins / strategyPerformance[i].totalTrades * 100.0;
      
      if(strategyPerformance[i].winRate < MinWinRateToDisable) {
         strategyPerformance[i].enabled = false;
         strategyPerformance[i].lastTradeTime = TimeCurrent();
         if(EnableNotifications) {
            Alert(_Symbol + " " + EnumToString(_Period) + ": Strategy Disabled: " + EnumToString(strategyPerformance[i].strategy) + 
                            " (Win Rate: " + DoubleToString(strategyPerformance[i].winRate, 1) + "%)");
         }
      }
      
      if(!strategyPerformance[i].enabled && 
         TimeCurrent() - strategyPerformance[i].lastTradeTime > ReEnableAfterHours * 3600) {
         strategyPerformance[i].enabled = true;
         if(EnableNotifications) {
            Alert(_Symbol + " " + EnumToString(_Period) + ": Strategy Re-enabled: " + EnumToString(strategyPerformance[i].strategy));
         }
      }
   }
}

//===================================================
// SECTION 10 : FONCTIONS PRINCIPALES DE L'EA
//===================================================

//+------------------------------------------------------------------+
//| Fonction d'initialisation                                       |
//+------------------------------------------------------------------+
int OnInit() {
   // Vérification des symboles autorisés
   string allowedSymbols[] = {"EURUSD", "USDJPY", "EURGBP", "XAUUSD", "GOLD", "BTCUSD"};
   bool symbolAllowed = false;
   for(int i=0; i<ArraySize(allowedSymbols); i++) {
      if(_Symbol == allowedSymbols[i]) {
         symbolAllowed = true;
         break;
      }
   }
   
   if(!symbolAllowed) {
      Alert("EA DIAMOND v26 ne peut pas trader ce symbole ", _Symbol);
      return INIT_FAILED;
   }

   // Initialisation des variables globales
   g_LastEquity  = AccountInfoDouble(ACCOUNT_EQUITY);
   g_LastBalance = AccountInfoDouble(ACCOUNT_BALANCE);
   g_ATRValue    = 0.0;
   g_IsGold      = (StringFind(_Symbol, "GOLD") >= 0 || StringFind(_Symbol, "XAUUSD") >= 0);

   // Initialisation des performances des stratégies
   for(int i = 0; i < STRATEGY_COUNT; i++) {
      strategyPerformance[i].strategy = (ENUM_STRATEGY)(i+1);
      strategyPerformance[i].enabled = true;
      strategyPerformance[i].weight = 1.0;
   }
   
   EnableSuperTrend = EnableSuperTrendInput;

   // Initialisation des indicateurs avec gestion d'erreur améliorée
   if(!strategyManager.InitializeIndicators()) {
      Print("Échec d'initialisation des indicateurs - continuation avec stratégies disponibles");
      
      // Désactive automatiquement les stratégies problématiques
      for(int i = 0; i < STRATEGY_COUNT; i++) {
         if(strategyPerformance[i].strategy == STRAT_SUPERTREND) {
            strategyPerformance[i].enabled = false;
            Print("Stratégie SuperTrend désactivée automatiquement");
         }
      }
   }
   
   if(!strategyManager.CheckIndicators()) {
      Print("Vérification des indicateurs échouée");
   }

   // Initialisation des stratégies
   strategies_total = 0;
   ArrayResize(strategies, STRATEGY_COUNT);

   for(int i = 0; i < STRATEGY_COUNT; i++) {
      StrategyStats s;
      s.Enabled = true;
      s.TotalTrades = 0;
      s.Wins = 0;
      s.Losses = 0;
      s.Profit = 0.0;
      s.WinRate = 0.0;
      s.StatusColor = clrSilver;

      switch(i + 1) {
         case STRAT_CHECKLIST:
            s.Name = "Checklist";
            s.StatusColor = clrLime;
            break;
         case STRAT_BREAKOUT_RANGE:
            s.Name = "Breakout";
            s.StatusColor = clrGold;
            break;
         case STRAT_PULLBACK_EMA:
            s.Name = "Pullback EMA";
            s.StatusColor = clrOrange;
            break;
         case STRAT_SUPERTREND:
            s.Name = "SuperTrend";
            s.StatusColor = clrDeepSkyBlue;
            break;
         case STRAT_RETEST_SR:
            s.Name = "Retest SR";
            s.StatusColor = clrDodgerBlue;
            break;
         case STRAT_SCALPING:
            s.Name = "Scalping";
            s.StatusColor = clrViolet;
            break;
      }

      strategies[strategies_total++] = s;
   }

   LoadStrategyPerformance();
   EventSetTimer(10);
   
   return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//| Fonction de désinitialisation                                   |
//+------------------------------------------------------------------+
void OnDeinit(const int reason) {
   SaveStrategyPerformance();
   DeleteDashboard();
   ObjectsDeleteAll(0, "Dashboard_");
   EventKillTimer();
}

//+------------------------------------------------------------------+
//| Fonction exécutée à chaque tick                                 |
//+------------------------------------------------------------------+
void OnTick() {
   Print("DEBUG ONTICK SYMBOL=", _Symbol);
   // Journalisation périodique
   static int tickCount = 0;
   tickCount++;
   
   if(EnableDebugLogging && tickCount % 100 == 0) {
      Print("=== STATUT EA ===");
      Print("Heure: ", TimeCurrent());
      Print("Symbol: ", _Symbol);
      Print("Timeframe: ", EnumToString(_Period));
      Print("EA active: ", ea_is_active);
      Print("Stratégies actives:");
      
      for(int i = 0; i < STRATEGY_COUNT; i++) {
         if(strategyPerformance[i].enabled) {
            Print("- ", EnumToString(strategyPerformance[i].strategy));
         }
      }
   }

   // Vérifie si l'EA est actif
   if(!ea_is_active) return;

   // Contrôle du spread
   double currentSpread = SymbolInfoInteger(_Symbol, SYMBOL_SPREAD) * _Point;
   double maxSpread = 100 * _Point;
   
   if(currentSpread > maxSpread) {
      Comment("Spread trop élevé : ", currentSpread, " (Max autorisé : ", maxSpread, ")");
      return;
   }

   // Mise à jour du dashboard toutes les secondes
   static datetime lastDashboardUpdate = 0;
   if(TimeCurrent() - lastDashboardUpdate >= 1) {
      UpdateDashboard();
      lastDashboardUpdate = TimeCurrent();
   }

   // Vérification des barres disponibles
   if(Bars(_Symbol, _Period) < MIN_BARS_REQUIRED) {
      Print("OnTick - Pas assez de barres chargées pour ", _Symbol, " (", Bars(_Symbol, _Period), ")");
      return;
   }
    
   // Vérification périodique des indicateurs
   static datetime lastIndicatorCheck = 0;
   if(TimeCurrent() - lastIndicatorCheck >= 30) {
      if(!strategyManager.AreIndicatorsReady()) {
         Print("Indicateurs non prêts - réinitialisation...");
         if(!strategyManager.InitializeIndicators()) {
            Alert("Échec de la réinitialisation des indicateurs!");
         }
      }
      lastIndicatorCheck = TimeCurrent();
   }

   // Mise à jour de l'ATR global
   double atrValue = iATR(_Symbol, _Period, ATRPeriod);
   if(atrValue > 0)
      g_ATRValue = atrValue;

   // Sortie intelligente si conditions critiques
   CheckIntelligentExit();

   // Gestion des positions existantes si nouveau trade impossible
   if(!tradeManager.CanOpenNewPosition(_Symbol)) {
      tradeManager.ManagePositions();
      return;
   }

   // Génération et exécution des signaux
   STradeSignal signal;
   signal.valid = false;

   if(CheckTradingConditions(signal) && signal.valid) {
      if(!OpenTrade(signal)) {
         Print("Échec de l'ouverture du trade! Erreur: ", GetLastError());
      }
   }

   // Gestion des stops
   tradeManager.ManagePositions();
}

//+------------------------------------------------------------------+
//| Fonction timer                                                  |
//+------------------------------------------------------------------+
void OnTimer() {
   if(EnableStrategyAutoManagement) {
      AutoManageStrategies();
   }
   
   UpdateStrategyWeights();
   UpdateDashboard();
}

//+------------------------------------------------------------------+
//| Gestion des événements du chart                                 |
//+------------------------------------------------------------------+
void OnChartEvent(const int id,
                  const long &lparam,
                  const double &dparam,
                  const string &sparam) {
   if(id == CHARTEVENT_OBJECT_CLICK) {
      string obj_name = sparam;
      if(obj_name == "DASHBOARD_CLOSE") {
         ea_is_active = false;
         Comment("EA Désactivé");
      }
   }
}

//===================================================
// SECTION 11 : FONCTIONS SUPPLEMENTAIRES
//===================================================

// Vérifie les conditions de trading
bool CheckTradingConditions(STradeSignal &signal) {
   if(!riskManager.IsTradeAllowed()) {
      signal.valid = false;
      return false;
   }

   // Vérification des indicateurs
   if(!strategyManager.AreIndicatorsReady()) {
      signal.valid = false;
      return false;
   }

   // Génération des signaux
   bool signalFound = false;
   if(strategyPerformance[STRAT_CHECKLIST-1].enabled) {
      signalFound = strategyManager.ChecklistStrategySignal(signal);
   }
   // Ajoutez ici les autres stratégies...

   return signalFound;
}

// Ouvre un trade
bool OpenTrade(const STradeSignal &signal) {
   return tradeManager.ExecuteTrade(signal);
}

// Ferme toutes les positions
void PerformFullClose() {
   int total = PositionsTotal();
   for(int i = total - 1; i >= 0; i--) {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket)) {
         string pos_symbol = PositionGetString(POSITION_SYMBOL);
         int pos_magic     = (int)PositionGetInteger(POSITION_MAGIC);
         if((pos_symbol == _Symbol) && (pos_magic == MagicNumber)) {
            trade.PositionClose(ticket);
         }
      }
   }
}

// Vérifie les conditions de sortie intelligente
void CheckIntelligentExit() {
   double totalProfit = 0.0;
   int openPositions = 0;
   int total = PositionsTotal();
   for(int i = 0; i < total; i++) {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket)) {
         string pos_symbol = PositionGetString(POSITION_SYMBOL);
         int pos_magic     = (int)PositionGetInteger(POSITION_MAGIC);
         if((pos_symbol == _Symbol) && (pos_magic == MagicNumber)) {
            totalProfit += PositionGetDouble(POSITION_PROFIT);
            openPositions++;
         }
      }
   }
   
   double profitThreshold = 50.0;
   double lossThreshold   = -30.0;
   bool anomaly = DetectMarketAnomaly();

   if(openPositions > 0) {
      if(totalProfit >= profitThreshold || totalProfit <= lossThreshold || anomaly) {
         Print("Fermeture totale déclenchée: profit total=", totalProfit, ", anomalie=", anomaly);
         PerformFullClose();
      }
   }
}

// Vérifie les anomalies du marché
bool DetectMarketAnomaly() {
   double spread = (SymbolInfoInteger(_Symbol, SYMBOL_SPREAD)) * SymbolInfoDouble(_Symbol, SYMBOL_POINT);
   if(spread > 10 * SymbolInfoDouble(_Symbol, SYMBOL_POINT))
      return true;
   return false;
}

//+------------------------------------------------------------------+
//| FIN DU CODE - DIAMOND EA VER26 - CORRECTED                      |
//+------------------------------------------------------------------+